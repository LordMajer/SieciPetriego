package com.petri.nets.gui;

import com.mxgraph.layout.hierarchical.mxHierarchicalLayout;
import com.mxgraph.layout.mxIGraphLayout;
import com.mxgraph.model.mxCell;
import com.mxgraph.model.mxGeometry;
import com.mxgraph.model.mxICell;
import com.mxgraph.swing.mxGraphComponent;
import com.petri.nets.algorithms.CoverageGraph;
import com.petri.nets.algorithms.CoverageTree;
import com.petri.nets.algorithms.ReachabilityGraph;
import com.petri.nets.archive.GraphReader;
import com.petri.nets.archive.GraphWriter;
import com.petri.nets.helpers.common.ObjectDeepCopier;
import com.petri.nets.helpers.transformation.CustomGraphToJGraphXAdapterTransformer;
import com.petri.nets.model.*;
import com.petri.nets.simulation.Simulator;
import org.jgrapht.ext.JGraphXAdapter;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import java.awt.*;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.util.HashMap;
import java.util.Map;

public class GUI extends javax.swing.JFrame {

    private static final String GRAPH_TAB_TITLE = "Graf";
    private static final String RESULT_TAB_TITLE = "Wyniki";
    private static final int GRAPH_TAB_INDEX = 1;
    private static final int RESULT_TAB_INDEX = 0;
    private static final int DEL_KEY_CODE = 127;
    private static final String INFORMATION_MESSAGE_TITLE = "INFORMACJA";
    private static final String ERROR_MESSAGE_TITLE = "BŁĄD";

    CustomGraph graphModel;
    Simulator simulator;
    JGraphXAdapter<Vertex, Edge> graphAdapter;
    JScrollPane scrollPane;

    public GUI() {
        initComponents();                                                // inicjalizacja komponentów GUI
        graphModel = new CustomGraph();
        CustomGraphInitializer.initialize(graphModel);
        displayGraph(graphModel);                                         // stworzenie wizualizacji
    }

    private void displayGraph(CustomGraph customGraph) {
        graphAdapter = CustomGraphToJGraphXAdapterTransformer.transform(customGraph);
        refreshGraphTab();
    }

    private void refreshGraphTab() {
        if (tabbedPane.indexOfTab(GRAPH_TAB_TITLE) != -1) {
            tabbedPane.remove(GRAPH_TAB_INDEX);
        }
        scrollPane = new JScrollPane(createJGraphComponent(graphAdapter));
        tabbedPane.addTab(GRAPH_TAB_TITLE, scrollPane);
        tabbedPane.revalidate();
        tabbedPane.repaint();
        tabbedPane.setSelectedIndex(GRAPH_TAB_INDEX);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel5 = new javax.swing.JPanel();
        optionPanel = new javax.swing.JPanel();
        option1Button = new javax.swing.JButton();
        option2Button = new javax.swing.JButton();
        option3Button = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        matrix1Button = new javax.swing.JButton();
        matrix2Button = new javax.swing.JButton();
        matrix3Button = new javax.swing.JButton();
        addPanel1 = new javax.swing.JPanel();
        addPlaceButton = new javax.swing.JButton();
        addPassageButton = new javax.swing.JButton();
        addEdgeButton = new javax.swing.JButton();
        removePanel = new javax.swing.JPanel();
        removeVertexButton = new javax.swing.JButton();
        simulationPanel = new javax.swing.JPanel();
        stopSimulationButton = new javax.swing.JButton();
        startSimulationButton = new javax.swing.JButton();
        stepButton = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        editButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 32767));
        tabbedPane = new javax.swing.JTabbedPane();
        resultsPanel = new javax.swing.JPanel();
        priorityCheckBox = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        optionPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Reprezentacja"));

        option1Button.setText("Graf osiągalności");
        option1Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                option1ButtonActionPerformed(evt);
            }
        });

        option2Button.setText("Drzewo pokrycia");
        option2Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                option2ButtonActionPerformed(evt);
            }
        });

        option3Button.setText("Graf pokrycia");
        option3Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                option3ButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout optionPanelLayout = new javax.swing.GroupLayout(optionPanel);
        optionPanel.setLayout(optionPanelLayout);
        optionPanelLayout.setHorizontalGroup(
                optionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(optionPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(optionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(option3Button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(option1Button, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(option2Button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addContainerGap())
        );
        optionPanelLayout.setVerticalGroup(
                optionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(optionPanelLayout.createSequentialGroup()
                                .addComponent(option1Button, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(option2Button, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(option3Button, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Macierze"));

        matrix1Button.setText("Macierz wejść");
        matrix1Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                matrix1ButtonActionPerformed(evt);
            }
        });

        matrix2Button.setText("Macierz wyjść");
        matrix2Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                matrix2ButtonActionPerformed(evt);
            }
        });

        matrix3Button.setText("Macierz incydencji");
        matrix3Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                matrix3ButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(matrix3Button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(matrix2Button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(matrix1Button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(matrix1Button, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(matrix2Button, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                                .addComponent(matrix3Button, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())
        );

        addPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Dodawanie"));

        addPlaceButton.setText("Dodaj miejsce");
        addPlaceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPlaceButtonActionPerformed(evt);
            }
        });

        addPassageButton.setText("Dodaj przejście");
        addPassageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPassageButtonActionPerformed(evt);
            }
        });

        addEdgeButton.setText("Dodaj połączenie");
        addEdgeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addEdgeButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout addPanel1Layout = new javax.swing.GroupLayout(addPanel1);
        addPanel1.setLayout(addPanel1Layout);
        addPanel1Layout.setHorizontalGroup(
                addPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, addPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(addPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(addEdgeButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(addPassageButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(addPlaceButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addContainerGap())
        );
        addPanel1Layout.setVerticalGroup(
                addPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(addPanel1Layout.createSequentialGroup()
                                .addComponent(addPlaceButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(addPassageButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(addEdgeButton)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        removePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Usuwanie"));

        removeVertexButton.setText("Usuń element");
        removeVertexButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeVertexButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout removePanelLayout = new javax.swing.GroupLayout(removePanel);
        removePanel.setLayout(removePanelLayout);
        removePanelLayout.setHorizontalGroup(
                removePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(removePanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(removeVertexButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addContainerGap())
        );
        removePanelLayout.setVerticalGroup(
                removePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(removePanelLayout.createSequentialGroup()
                                .addComponent(removeVertexButton, javax.swing.GroupLayout.DEFAULT_SIZE, 43, Short.MAX_VALUE)
                                .addContainerGap())
        );

        simulationPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Symulacja"));

        stopSimulationButton.setBackground(new java.awt.Color(204, 51, 0));
        stopSimulationButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        stopSimulationButton.setText("Stop");
        stopSimulationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopSimulationButtonActionPerformed(evt);
            }
        });

        startSimulationButton.setBackground(new java.awt.Color(0, 204, 0));
        startSimulationButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        startSimulationButton.setText("Start");
        startSimulationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startSimulationButtonActionPerformed(evt);
            }
        });

        stepButton.setBackground(new java.awt.Color(204, 204, 0));
        stepButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        stepButton.setText("Krok");
        stepButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stepButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout simulationPanelLayout = new javax.swing.GroupLayout(simulationPanel);
        simulationPanel.setLayout(simulationPanelLayout);
        simulationPanelLayout.setHorizontalGroup(
                simulationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, simulationPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(startSimulationButton, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(stepButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(18, 18, 18)
                                .addComponent(stopSimulationButton, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())
        );
        simulationPanelLayout.setVerticalGroup(
                simulationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(simulationPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(simulationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(stopSimulationButton, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(stepButton, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(startSimulationButton, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Edycja"));

        editButton.setText("Edytuj");
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
                jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(editButton, javax.swing.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
                jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addComponent(editButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Archiwizacja"));

        jButton1.setText("Wczytaj");
        jButton1.setPreferredSize(new java.awt.Dimension(70, 25));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadGraphButtonActionPerformed(evt);
            }
        });

        jButton2.setText("Zapisz");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveGraphButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
                jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(37, 37, 37)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 43, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
                jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel5Layout.createSequentialGroup()
                                                .addContainerGap()
                                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addComponent(simulationPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addGroup(jPanel5Layout.createSequentialGroup()
                                                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                                        .addComponent(addPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                        .addComponent(optionPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addGroup(jPanel5Layout.createSequentialGroup()
                                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                                                                                .addGap(10, 10, 10)
                                                                                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                                        .addComponent(removePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                        .addGroup(jPanel5Layout.createSequentialGroup()
                                                .addGap(40, 40, 40)
                                                .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(optionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(addPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(removePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(simulationPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jScrollPane2.setViewportView(jPanel5);

        resultsPanel.setLayout(new java.awt.BorderLayout());
        tabbedPane.addTab("Wyniki", resultsPanel);

        priorityCheckBox.setText("Sieć priorytetowa");
        priorityCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                priorityCheckBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 1082, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(priorityCheckBox, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 652, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                            .addComponent(jScrollPane2)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(priorityCheckBox))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void revalidateModelVertexPosition(JGraphXAdapter<Vertex, Edge> graphAdapter) {
        for (Map.Entry<Vertex, mxICell> vertex : graphAdapter.getVertexToCellMap().entrySet()) {
            Vertex currentVertex = vertex.getKey();
            mxICell currentVertexCell = vertex.getValue();
            mxGeometry currentVertexCellGeometry = currentVertexCell.getGeometry();
            currentVertex.setHeight(currentVertexCellGeometry.getHeight());
            currentVertex.setWidth(currentVertexCellGeometry.getWidth());
            currentVertex.setX(currentVertexCellGeometry.getX());
            currentVertex.setY(currentVertexCellGeometry.getY());
        }
    }

    private void removeVertexButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeVertexButtonActionPerformed
        revalidateModelVertexPosition(graphAdapter);
        Object[] cells = graphAdapter.getSelectionCells();
        if (cells.length < 1) {
            JOptionPane.showMessageDialog(this, "Najpierw zaznacz element, który chcesz usunąć!!!!", ERROR_MESSAGE_TITLE, JOptionPane.ERROR_MESSAGE);
            return;
        }
        for (int i = 0 ; i < cells.length ; i++) {
            Object obj = ((mxCell) cells[i]).getValue();
            if (obj instanceof Vertex) {
                Vertex vertex = (Vertex) obj;
                graphModel.removeVertex(vertex);
            } else if (obj instanceof Edge) {
                Edge edge = (Edge) obj;
                graphModel.removeEdge(edge);
            }
            displayGraph(graphModel);
        }
    }//GEN-LAST:event_removeVertexButtonActionPerformed

    private void addEdgeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addEdgeButtonActionPerformed
        revalidateModelVertexPosition(graphAdapter);
        Object[] cells = graphAdapter.getSelectionCells();
        if (cells.length != 2) {
            JOptionPane.showMessageDialog(this, "Aby dodać krawędź należy zaznaczyć dokładnie 2 wierzchołki!", ERROR_MESSAGE_TITLE, JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        Vertex sourceVertex = (Vertex) ((mxCell) cells[0]).getValue();
        Vertex destinationVertex = (Vertex) ((mxCell) cells[1]).getValue();
        
         // Sprawdzenie czy wierzchołki są tych samych typów
        if ((sourceVertex instanceof Place && destinationVertex instanceof Place)
                || (sourceVertex instanceof Transition && destinationVertex instanceof Transition)) {
            
            JOptionPane.showMessageDialog(this, "Krawędź może istnieć tylko między dwoma wierzchołkami różnych typów!", ERROR_MESSAGE_TITLE, JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        Edge edge = new Edge(sourceVertex.getID(), destinationVertex.getID());
        graphModel.addEdge(edge);
        displayGraph(graphModel);
    }//GEN-LAST:event_addEdgeButtonActionPerformed

    private void addPassageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPassageButtonActionPerformed
        revalidateModelVertexPosition(graphAdapter);
        Transition przejscie = new Transition(graphModel.getNewID(), graphModel.getNewName(Transition.getVertexType()));
        graphModel.addVertex(przejscie);
        displayGraph(graphModel);
    }//GEN-LAST:event_addPassageButtonActionPerformed

    private void addPlaceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPlaceButtonActionPerformed
        revalidateModelVertexPosition(graphAdapter);
        Place miejsce = new Place(graphModel.getNewID(), graphModel.getNewName(Place.getVertexType()));
        graphModel.addVertex(miejsce);
        displayGraph(graphModel);
    }//GEN-LAST:event_addPlaceButtonActionPerformed

    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed
        revalidateModelVertexPosition(graphAdapter);
        Object[] selectedElements = graphAdapter.getSelectionCells();
        if (selectedElements.length == 1) {
            Object selectedElement = ((mxCell) selectedElements[0]).getValue();
            if (selectedElement instanceof Place) {
                editPlace(selectedElement);
            } else if (selectedElement instanceof Transition) {
                editTransition(selectedElement);
            } else if (selectedElement instanceof Edge) {
                editEdge(selectedElement);
            } else {
                JOptionPane.showMessageDialog(this, "Wystąpił błąd podczas zaznaczania!", ERROR_MESSAGE_TITLE, JOptionPane.ERROR_MESSAGE);
            }
        } else if (selectedElements.length == 2 && selectedElements[0] instanceof Vertex && selectedElements[1] instanceof Vertex) {
            editEdge(selectedElements);
        } else {
            JOptionPane.showMessageDialog(this, "Aby edytować elementy grafu należy zaznaczyć pojedynczy element lub dwa wierzchołki w celu edycji krawędzi pomiędzy nimi!", ERROR_MESSAGE_TITLE, JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_editButtonActionPerformed

    private void editPlace(Object selectedPlace) {
        Map<String, Object> values = new HashMap<>();
        values.put("Object", selectedPlace);
        EditPlacePanel editPlacePanel = new EditPlacePanel(this, "Edycja miejsca", true, values);
        if (values.get("Status") != null && values.get("Status").equals("Ok")) {
            Place modelVertex = (Place) graphModel.getVertex(((Place) values.get("Object")).getID());
            Place changedVertex = (Place) values.get("ReturnObject");
            modelVertex.setName(changedVertex.getName());
            modelVertex.setTokenCount(changedVertex.getTokenCount());
            modelVertex.setCapacity(changedVertex.getCapacity());
        }
        displayGraph(graphModel);
    }

    private void editTransition(Object selectedTransition) {
        Map<String, Object> values = new HashMap<>();
        values.put("Object", selectedTransition);
        EditTransitionPanel editTransitionPanel = new EditTransitionPanel(this, "Edycja przejścia", true, values);
        if (values.get("Status") != null && values.get("Status").equals("Ok")) {
            Transition modelVertex = (Transition) graphModel.getVertex(((Transition) values.get("Object")).getID());
            Transition changedVertex = (Transition) values.get("ReturnObject");
            modelVertex.setName(changedVertex.getName());
            modelVertex.setPriority(changedVertex.getPriority());
        }
        displayGraph(graphModel);
    }

    private void editEdge(Object selectedEdge) {
        Map<String, Object> values = new HashMap<>();
        values.put("Object", selectedEdge);
        EditEdgePanel editEdgePanel = new EditEdgePanel(this, "Edycja krawędzi", true, values);
        if (values.get("Status") != null && values.get("Status").equals("Ok")) {
            Edge modelEdge = (Edge) graphModel.getEdge(((Edge) values.get("Object")).getKey());
            Edge changedEdge = (Edge) values.get("ReturnObject");
            modelEdge.setCapacity(changedEdge.getCapacity());
        }
        displayGraph(graphModel);
    }

    private void editEdge(Object[] selectedVertices) {
        Map<String, Object> values = new HashMap<>();
        Vertex sourceObject = (Vertex) ((mxCell) selectedVertices[0]).getValue();
        Vertex destinationObject = (Vertex) ((mxCell) selectedVertices[1]).getValue();
        Edge chosenEdge = new Edge(sourceObject.getID(), destinationObject.getID());
        Edge foundEdge = graphModel.getEdge(chosenEdge.getKey());
        if (foundEdge != null) {
            values.put("Object", foundEdge);
            EditEdgePanel editEdgePanel = new EditEdgePanel(this, "Edycja krawędzi", true, values);
            if (values.get("Status") != null && values.get("Status").equals("Ok")) {
                Edge modelEdge = graphModel.getEdge(((Edge) values.get("Object")).getKey());
                Edge changedVertex = (Edge) values.get("ReturnObject");
                modelEdge.setCapacity(changedVertex.getCapacity());
            }
            displayGraph(graphModel);
        } else {
            JOptionPane.showMessageDialog(this, "Brak krawedzi pomiędzy zaznaczonymi wierzchołkami!", ERROR_MESSAGE_TITLE, JOptionPane.ERROR_MESSAGE);
        }
    }

    private void matrix1ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_matrix1ButtonActionPerformed
        resultsPanel.removeAll();
        resultsPanel.revalidate();
        if (!isGraphValid(graphModel)) {
            return;
        }
        MatrixCreator matrixCreator = new MatrixCreator(graphModel);
        JPanel panel = getJPanelWithTitle("Macierz wejść");
        panel.add(matrixCreator.generateInputMatrix());
        resultsPanel.add(getJScrollPane(panel));
        tabbedPane.setSelectedIndex(RESULT_TAB_INDEX);
    }//GEN-LAST:event_matrix1ButtonActionPerformed

    private void matrix2ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_matrix2ButtonActionPerformed
        resultsPanel.removeAll();
        resultsPanel.revalidate();
        if (!isGraphValid(graphModel)) {
            return;
        }
        MatrixCreator matrixCreator = new MatrixCreator(graphModel);
        JPanel panel = getJPanelWithTitle("Macierz wyjść");
        panel.add(matrixCreator.generateOutputMatrix());
        resultsPanel.add(getJScrollPane(panel));
        tabbedPane.setSelectedIndex(RESULT_TAB_INDEX);
    }//GEN-LAST:event_matrix2ButtonActionPerformed

    private void matrix3ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_matrix3ButtonActionPerformed
        resultsPanel.removeAll();
        resultsPanel.revalidate();
        if (!isGraphValid(graphModel)) {
            return;
        }
        MatrixCreator matrixCreator = new MatrixCreator(graphModel);
        JPanel panel = getJPanelWithTitle("Macierz incydencji");
        panel.add(matrixCreator.generateIncidenceMatrix());
        resultsPanel.add(getJScrollPane(panel));
        tabbedPane.setSelectedIndex(RESULT_TAB_INDEX);
    }//GEN-LAST:event_matrix3ButtonActionPerformed

    private void option1ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_option1ButtonActionPerformed
        resultsPanel.removeAll();
        resultsPanel.revalidate();
        if (!isGraphValid(graphModel)) {
            return;
        }
        ReachabilityGraph reachabilityGraph = new ReachabilityGraph(graphModel);
        JPanel panel = getJPanelWithBorderLayoutAndTitle("Graf osiągalności");
        panel.add(createJGraphComponentWithLayout(CustomGraphToJGraphXAdapterTransformer.transform(reachabilityGraph.build())));
        resultsPanel.add(getJScrollPane(panel));
        tabbedPane.setSelectedIndex(RESULT_TAB_INDEX);
    }//GEN-LAST:event_option1ButtonActionPerformed

    private void option2ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_option2ButtonActionPerformed
        resultsPanel.removeAll();
        resultsPanel.revalidate();
        if (!isGraphValid(graphModel)) {
            return;
        }
        CoverageTree coverageTree = new CoverageTree(graphModel);
        JPanel panel = getJPanelWithBorderLayoutAndTitle("Drzewo pokrycia");
        panel.add(createJGraphComponentWithLayout(CustomGraphToJGraphXAdapterTransformer.transform(coverageTree.build())));
        resultsPanel.add(getJScrollPane(panel));
        tabbedPane.setSelectedIndex(RESULT_TAB_INDEX);
    }//GEN-LAST:event_option2ButtonActionPerformed

    private void option3ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_option3ButtonActionPerformed
        resultsPanel.removeAll();
        resultsPanel.revalidate();
        if (!isGraphValid(graphModel)) {
            return;
        }
        CoverageGraph coverageGraph = new CoverageGraph(graphModel);
        JPanel panel = getJPanelWithBorderLayoutAndTitle("Graf pokrycia");
        panel.add(createJGraphComponentWithLayout(CustomGraphToJGraphXAdapterTransformer.transform(coverageGraph.build())));
        resultsPanel.add(getJScrollPane(panel));
        tabbedPane.setSelectedIndex(RESULT_TAB_INDEX);
    }//GEN-LAST:event_option3ButtonActionPerformed

    private void startSimulationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startSimulationButtonActionPerformed
        resultsPanel.removeAll();
        resultsPanel.revalidate();
        ModelValidator.validate(graphModel);
        if (isGraphValid(graphModel)) {
            simulator = new Simulator(ObjectDeepCopier.getCopyOf(graphModel));
            resultsPanel.add(createJGraphComponent(CustomGraphToJGraphXAdapterTransformer.transform(simulator.getGraph())));
            tabbedPane.setSelectedIndex(RESULT_TAB_INDEX);
        }
    }//GEN-LAST:event_startSimulationButtonActionPerformed

    private boolean isGraphValid(CustomGraph graphModel) {
        String errors = ModelValidator.validate(graphModel);
        if (errors != null) {
            JPanel errorPanel = new JPanel(new BorderLayout());
            JTextArea errorTextArea = new JTextArea();
            errorTextArea.setFont(new Font("monospaced", Font.PLAIN, 12));
            errorTextArea.setText(errors);
            errorPanel.add(errorTextArea, BorderLayout.CENTER);
            resultsPanel.add(errorPanel);
            tabbedPane.setSelectedIndex(RESULT_TAB_INDEX);
            return false;
        }
        return true;
    }

    private void stepButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stepButtonActionPerformed
        java.util.List<Transition> possibleSteps = simulator.getPossibleSteps();
        if (possibleSteps.size() == 0) {
            JOptionPane.showMessageDialog(this, "Brak możliwych kroków!", INFORMATION_MESSAGE_TITLE, JOptionPane.INFORMATION_MESSAGE);
            return;
        } else if (possibleSteps.size() == 1) {
            Transition transition = possibleSteps.get(0);
            simulator.takeStep(transition);
            JOptionPane.showMessageDialog(this, "Wykonano przejście : " + transition.getName(), INFORMATION_MESSAGE_TITLE, JOptionPane.INFORMATION_MESSAGE);
            resultsPanel.removeAll();
            resultsPanel.revalidate();
            resultsPanel.add(createJGraphComponent(CustomGraphToJGraphXAdapterTransformer.transform(simulator.getGraph())));
        } else {
            String optionChosen = JOptionPane.showInputDialog("Wybierz jedno z możliwych przejść: " + possibleSteps.toString()); // TODO Display options as buttons to chose
            Transition transition = graphModel.getTransitionByName(possibleSteps, optionChosen);
            if (transition != null) {
                simulator.takeStep(transition);
                JOptionPane.showMessageDialog(this, "Wykonano przejście : " + transition.getName(), INFORMATION_MESSAGE_TITLE, JOptionPane.INFORMATION_MESSAGE);
                resultsPanel.removeAll();
                resultsPanel.revalidate();
                resultsPanel.add(createJGraphComponent(CustomGraphToJGraphXAdapterTransformer.transform(simulator.getGraph())));
            } else {
                if (optionChosen != null) {
                    JOptionPane.showMessageDialog(this, "Wskazane przejście (" + optionChosen + ") nie jest w tej chwili możliwe", ERROR_MESSAGE_TITLE, JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_stepButtonActionPerformed

    private void stopSimulationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopSimulationButtonActionPerformed
        resultsPanel.removeAll();
        resultsPanel.revalidate();
        tabbedPane.setSelectedIndex(GRAPH_TAB_INDEX);
    }//GEN-LAST:event_stopSimulationButtonActionPerformed

    private void loadGraphButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadGraphButtonActionPerformed
        revalidateModelVertexPosition(graphAdapter);
        graphModel = GraphReader.loadGraph(graphModel);
        displayGraph(graphModel);
    }//GEN-LAST:event_loadGraphButtonActionPerformed

    private void saveGraphButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveGraphButtonActionPerformed
        revalidateModelVertexPosition(graphAdapter);
        GraphWriter.saveGraph(graphModel);
    }//GEN-LAST:event_saveGraphButtonActionPerformed

    private void priorityCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_priorityCheckBoxActionPerformed
        graphModel.setPriority(priorityCheckBox.isSelected());
        displayGraph(graphModel);
    }//GEN-LAST:event_priorityCheckBoxActionPerformed

    private JScrollPane createJGraphComponent(final JGraphXAdapter<Vertex, Edge> graphAdapter) {
        mxGraphComponent mxGraphComponent = new mxGraphComponent(graphAdapter);
        mxGraphComponent.setConnectable(false); // disable possibility of new edges creation
        mxGraphComponent.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                Object[] cells = graphAdapter.getSelectionCells();
                if (tabbedPane.getSelectedIndex() == tabbedPane.indexOfTab(GRAPH_TAB_TITLE) && cells.length > 0 && e.getKeyCode() == DEL_KEY_CODE) {
                    removeVertexButtonActionPerformed(null);
                }
            }
        });
        mxGraphComponent.refresh(); // to do the changes visible
        return mxGraphComponent;
    }

    private JScrollPane createJGraphComponentWithLayout(JGraphXAdapter<Vertex, Edge> graphAdapter) {
        JScrollPane mxGraphComponent = createJGraphComponent(graphAdapter);
        mxIGraphLayout layout = new mxHierarchicalLayout(graphAdapter);
        layout.execute(graphAdapter.getDefaultParent());
        return mxGraphComponent;
    }

    private JPanel getJPanelWithTitle(String title) {
        JPanel panel = new JPanel();
        panel.setBorder (BorderFactory.createTitledBorder (BorderFactory.createEtchedBorder(),
                title,
                TitledBorder.CENTER,
                TitledBorder.TOP));
        return panel;
    }

    private JPanel getJPanelWithBorderLayoutAndTitle(String title) {
        JPanel panel = getJPanelWithTitle(title);
        panel.setLayout(new BorderLayout());
        return panel;
    }

    private JScrollPane getJScrollPane(JPanel panel) {
        JScrollPane jScrollPane = new JScrollPane(panel);
        return jScrollPane;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new GUI().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addEdgeButton;
    private javax.swing.JPanel addPanel1;
    private javax.swing.JButton addPassageButton;
    private javax.swing.JButton addPlaceButton;
    private javax.swing.JButton editButton;
    private javax.swing.Box.Filler filler1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton matrix1Button;
    private javax.swing.JButton matrix2Button;
    private javax.swing.JButton matrix3Button;
    private javax.swing.JButton option1Button;
    private javax.swing.JButton option2Button;
    private javax.swing.JButton option3Button;
    private javax.swing.JPanel optionPanel;
    private javax.swing.JCheckBox priorityCheckBox;
    private javax.swing.JPanel removePanel;
    private javax.swing.JButton removeVertexButton;
    private javax.swing.JPanel resultsPanel;
    private javax.swing.JPanel simulationPanel;
    private javax.swing.JButton startSimulationButton;
    private javax.swing.JButton stepButton;
    private javax.swing.JButton stopSimulationButton;
    private javax.swing.JTabbedPane tabbedPane;
    // End of variables declaration//GEN-END:variables
}
