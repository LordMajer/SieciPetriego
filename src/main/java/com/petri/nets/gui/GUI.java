package com.petri.nets.gui;

import com.petri.nets.algorithms.CoverageGraph;
import com.petri.nets.algorithms.CoverageTree;
import com.petri.nets.algorithms.ReachabilityGraph;
import com.petri.nets.archive.GraphReader;
import com.petri.nets.archive.GraphWriter;
import com.petri.nets.model.*;
import com.petri.nets.model.Edge;
import org.jgraph.JGraph;
import org.jgraph.graph.*;
import org.jgrapht.ext.JGraphModelAdapter;
import org.jgrapht.graph.DirectedWeightedMultigraph;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import java.awt.*;
import java.awt.geom.Rectangle2D;
import java.util.HashMap;
import java.util.Map;

/**
 *
 * @author Mateusz
 */
public class GUI extends javax.swing.JFrame {

    JGraph jGraph;
    CustomGraph graphModel;
    JGraphModelAdapter graphAdapter;
    JScrollPane scrollPane;

    /**
     * Creates new form GUI
     */
    public GUI() {
        initComponents();                                                // inicjalizacja komponentów GUI
        graphModel = new CustomGraph();
        CustomGraphInitializer.initialize(graphModel);
        displayGraph(graphModel);                                         // stworzenie wizualizacji
    }

    public void displayGraph(CustomGraph customGraph) {

        System.out.println(graphModel.getVertices());
        System.out.println(graphModel.getEdges());

        jGraph = createJGraph(customGraph);

        adjustGraphDisplay(jGraph);
        //revalidateGraphVertexPosition(jGraph);
        refreshGraphTab();
    }

    private JGraph createJGraph(CustomGraph graph) {
        DirectedWeightedMultigraph<Vertex, DefaultEdge> g = new DirectedWeightedMultigraph<>(DefaultEdge.class);

        for (Vertex vertex : graph.getVertices().values()) {        // dodanie wierzchołków.
            g.addVertex(vertex);
        }

        for (Edge edge : graph.getEdges().values()) {               // dodanie krawędzi.
            g.addEdge(graph.getVertex(edge.getSourceId()), graph.getVertex(edge.getDestinationId()));
        }
        //for(old.getGraphLayoutCache().getCellViews())

        graphAdapter = new JGraphModelAdapter<>(g);

        // pozycjonowanie:
        for (Vertex vertex : graph.getVertices().values()) {
            positionVertexAt(vertex, graphAdapter);
        }
        return new JGraph(graphAdapter);
    }

    public void revalidateModelVertexPosition(JGraph oldGraph) {

        for (CellView view : oldGraph.getGraphLayoutCache().getCellViews()) {
            if (view instanceof VertexView) {
                Vertex oldVertex = (Vertex) ((DefaultGraphCell) view.getCell()).getUserObject();
                Vertex newVertex = graphModel.getVertex(oldVertex.getID());
                Rectangle2D rectangle = (Rectangle2D) view.getAllAttributes().get("bounds");
                newVertex.setX((int) rectangle.getX());
                newVertex.setY((int) rectangle.getY());
                newVertex.setWidth((int) rectangle.getWidth());
                newVertex.setHeight((int) rectangle.getHeight());
            }
        }
    }

    @SuppressWarnings("unchecked") // FIXME hb 28-nov-05: See FIXME below
    private void positionVertexAt(Object vertex, JGraphModelAdapter graphAdapter) {
        Vertex vert = (Vertex) vertex;
        DefaultGraphCell cell = graphAdapter.getVertexCell(vertex);
        AttributeMap attr = cell.getAttributes();

        Rectangle2D newBounds = new Rectangle2D.Double(vert.getX(), vert.getY(), vert.getWidth(), vert.getHeight());

        GraphConstants.setBounds(attr, newBounds);

        // TODO: Clean up generics once JGraph goes generic
        org.jgraph.graph.AttributeMap cellAttr = new AttributeMap();
        cellAttr.put(cell, attr);
        graphAdapter.edit(cellAttr, null, null, null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel5 = new javax.swing.JPanel();
        optionPanel = new javax.swing.JPanel();
        option1Button = new javax.swing.JButton();
        option2Button = new javax.swing.JButton();
        option3Button = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        matrix1Button = new javax.swing.JButton();
        matrix2Button = new javax.swing.JButton();
        matrix3Button = new javax.swing.JButton();
        addPanel1 = new javax.swing.JPanel();
        addPlaceButton = new javax.swing.JButton();
        addPassageButton = new javax.swing.JButton();
        addEdgeButton = new javax.swing.JButton();
        removePanel = new javax.swing.JPanel();
        removeVertexButton = new javax.swing.JButton();
        removeEdgeButton = new javax.swing.JButton();
        simulationPanel = new javax.swing.JPanel();
        stopSimulationButton = new javax.swing.JButton();
        startSimulationButton = new javax.swing.JButton();
        stepButton = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        editButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 32767));
        tabbedPane = new javax.swing.JTabbedPane();
        resultsPanel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        optionPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Reprezentacja"));

        option1Button.setText("Graf osiągalności");
        option1Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                option1ButtonActionPerformed(evt);
            }
        });

        option2Button.setText("Drzewo pokrycia");
        option2Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                option2ButtonActionPerformed(evt);
            }
        });

        option3Button.setText("Graf pokrycia");
        option3Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                option3ButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout optionPanelLayout = new javax.swing.GroupLayout(optionPanel);
        optionPanel.setLayout(optionPanelLayout);
        optionPanelLayout.setHorizontalGroup(
            optionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(optionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(optionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(option3Button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(option1Button, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(option2Button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        optionPanelLayout.setVerticalGroup(
            optionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(optionPanelLayout.createSequentialGroup()
                .addComponent(option1Button, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(option2Button, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(option3Button, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Macierze"));

        matrix1Button.setText("Macierz wejść");
        matrix1Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                matrix1ButtonActionPerformed(evt);
            }
        });

        matrix2Button.setText("Macierz wyjść");
        matrix2Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                matrix2ButtonActionPerformed(evt);
            }
        });

        matrix3Button.setText("Macierz incydencji");
        matrix3Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                matrix3ButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(matrix3Button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(matrix2Button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(matrix1Button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(matrix1Button, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(matrix2Button, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addComponent(matrix3Button, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        addPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Dodawanie"));

        addPlaceButton.setText("Dodaj miejsce");
        addPlaceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPlaceButtonActionPerformed(evt);
            }
        });

        addPassageButton.setText("Dodaj przejście");
        addPassageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPassageButtonActionPerformed(evt);
            }
        });

        addEdgeButton.setText("Dodaj połączenie");
        addEdgeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addEdgeButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout addPanel1Layout = new javax.swing.GroupLayout(addPanel1);
        addPanel1.setLayout(addPanel1Layout);
        addPanel1Layout.setHorizontalGroup(
            addPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, addPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(addPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(addEdgeButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(addPassageButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(addPlaceButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        addPanel1Layout.setVerticalGroup(
            addPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addPanel1Layout.createSequentialGroup()
                .addComponent(addPlaceButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addPassageButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addEdgeButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        removePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Usuwanie"));

        removeVertexButton.setText("Usuń element");
        removeVertexButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeVertexButtonActionPerformed(evt);
            }
        });

        removeEdgeButton.setText("Usuń krawędź");
        removeEdgeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeEdgeButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout removePanelLayout = new javax.swing.GroupLayout(removePanel);
        removePanel.setLayout(removePanelLayout);
        removePanelLayout.setHorizontalGroup(
            removePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(removePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(removePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(removeVertexButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(removeEdgeButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        removePanelLayout.setVerticalGroup(
            removePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(removePanelLayout.createSequentialGroup()
                .addComponent(removeVertexButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                .addComponent(removeEdgeButton))
        );

        simulationPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Symulacja"));

        stopSimulationButton.setBackground(new java.awt.Color(204, 51, 0));
        stopSimulationButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        stopSimulationButton.setText("Stop");
        stopSimulationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopSimulationButtonActionPerformed(evt);
            }
        });

        startSimulationButton.setBackground(new java.awt.Color(0, 204, 0));
        startSimulationButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        startSimulationButton.setText("Start");
        startSimulationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startSimulationButtonActionPerformed(evt);
            }
        });

        stepButton.setBackground(new java.awt.Color(204, 204, 0));
        stepButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        stepButton.setText("Krok");
        stepButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stepButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout simulationPanelLayout = new javax.swing.GroupLayout(simulationPanel);
        simulationPanel.setLayout(simulationPanelLayout);
        simulationPanelLayout.setHorizontalGroup(
            simulationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, simulationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(startSimulationButton, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(stepButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(stopSimulationButton, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        simulationPanelLayout.setVerticalGroup(
            simulationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(simulationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(simulationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(stopSimulationButton, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(stepButton, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(startSimulationButton, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Edycja"));

        editButton.setText("Edytuj");
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(editButton, javax.swing.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(editButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Archiwizacja"));

        jButton1.setText("Wczytaj");
        jButton1.setPreferredSize(new java.awt.Dimension(70, 25));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadGraphButtonActionPerformed(evt);
            }
        });

        jButton2.setText("Zapisz");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveGraphButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 43, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(simulationPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(addPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(optionPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel5Layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addComponent(removePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(optionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(addPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(removePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(simulationPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jScrollPane2.setViewportView(jPanel5);

        resultsPanel.setLayout(new java.awt.BorderLayout());
        tabbedPane.addTab("Wyniki", resultsPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 1082, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 652, Short.MAX_VALUE)
                    .addComponent(jScrollPane2)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void removeVertexButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeVertexButtonActionPerformed
        revalidateModelVertexPosition(jGraph);
        Object[] cells = jGraph.getSelectionCells();
        if (cells.length != 1) {
            JOptionPane.showMessageDialog(this, "Aby Usunąć nalezy zaznaczyć dokładnie jeden element!", "Błąd", JOptionPane.ERROR_MESSAGE);
        } else {
            Object obj = ((DefaultGraphCell) cells[0]).getUserObject();
            if (obj instanceof Vertex) {

                Vertex vertex = (Vertex) obj;
                // usuniecie wierzchołka
                graphModel.removeVertex(vertex);
            }
        }
        displayGraph(graphModel);
    }//GEN-LAST:event_removeVertexButtonActionPerformed

    private void addEdgeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addEdgeButtonActionPerformed
        // TODO add your handling code here:

        revalidateModelVertexPosition(jGraph);
        Object[] cells = jGraph.getSelectionCells();
        if (cells.length != 2) {
            JOptionPane.showMessageDialog(this, "Aby dodać krawędź należy zaznaczyć dokładnie 2 wierzchołki!", "Błąd", JOptionPane.ERROR_MESSAGE);
        } else {

            Vertex sourceVertex = (Vertex) ((DefaultGraphCell) cells[0]).getUserObject();
            Vertex destinationVertex = (Vertex) ((DefaultGraphCell) cells[1]).getUserObject();

            Edge edge = new Edge(sourceVertex.getID(), destinationVertex.getID());
            graphModel.addEdge(edge);
            displayGraph(graphModel);
        }
    }//GEN-LAST:event_addEdgeButtonActionPerformed

    private void addPassageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPassageButtonActionPerformed

        revalidateModelVertexPosition(jGraph);
        Transition przejscie = new Transition(graphModel.getNewID(), graphModel.getNewName(Transition.getVertexType()));
        graphModel.addVertex(przejscie);
        displayGraph(graphModel);
    }//GEN-LAST:event_addPassageButtonActionPerformed

    private void addPlaceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPlaceButtonActionPerformed

        revalidateModelVertexPosition(jGraph);
        Place miejsce = new Place(graphModel.getNewID(), graphModel.getNewName(Place.getVertexType()));
        graphModel.addVertex(miejsce);
        displayGraph(graphModel);
    }//GEN-LAST:event_addPlaceButtonActionPerformed

    private void removeEdgeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeEdgeButtonActionPerformed
        revalidateModelVertexPosition(jGraph);
        Object[] cells = jGraph.getSelectionCells();
        if (cells.length != 2) {
            JOptionPane.showMessageDialog(this, "Aby Usunąć krawędź należy zaznaczyć dwa wierzchołki które są nią polączone!", "Błąd", JOptionPane.ERROR_MESSAGE);
        } else {
            Edge tempEdge;
            Vertex vertex1 = (Vertex) ((DefaultGraphCell) cells[0]).getUserObject();
            Vertex vertex2 = (Vertex) ((DefaultGraphCell) cells[1]).getUserObject();

            tempEdge = new Edge(vertex1.getID(), vertex2.getID());
            if (graphModel.getEdges().containsKey(tempEdge.getKey())) {
                System.out.println("if1");
                graphModel.removeEdge(tempEdge);
            } else {
                System.out.println("else");
                tempEdge = new Edge(vertex2.getID(), vertex1.getID());
                if (graphModel.getEdges().containsKey(tempEdge.getKey())) {
                    System.out.println("if2");
                    graphModel.removeEdge(tempEdge);
                }
            }
        }
        displayGraph(graphModel);
    }//GEN-LAST:event_removeEdgeButtonActionPerformed

    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed

        revalidateModelVertexPosition(jGraph);
        Object[] cells = jGraph.getSelectionCells();
        if (cells.length == 1) {
            // edycja miejsca lub przejścia

            Object obj = ((DefaultGraphCell) cells[0]).getUserObject();
            if (obj instanceof Place) {

                Map<String, Object> values = new HashMap<>();
                values.put("Object", obj);
                EditPlacePanel editPlacePanel = new EditPlacePanel(this, "Edycja miejsca", true, values);
                // sprawdzenie czy należy edytować zawartość miejsca: Edycja jeśli status ok
                if (values.get("Status") != null && values.get("Status").equals("Ok")) {
                    System.out.println("Następuje zmiana danych miejsca.");
                    Place modelVertex = (Place) graphModel.getVertex(((Place) values.get("Object")).getID());
                    Place changedVertex = (Place) values.get("ReturnObject");
                    // update:
                    modelVertex.setName(changedVertex.getName());
                    modelVertex.setTokenCount(changedVertex.getTokenCount());
                    modelVertex.setCapacity(changedVertex.getCapacity());
                }
                System.out.println(values);
                displayGraph(graphModel);
            } else if (obj instanceof Transition) {

                System.out.println("Przejscie");
                Map<String, Object> values = new HashMap<>();
                values.put("Object", obj);
                EditTransitionPanel editPassagePanel = new EditTransitionPanel(this, "Edycja przejscia", true, values);

                // sprawdzenie czy należy edytować zawartość przejścia: Edycja jeśli status ok
                if (values.get("Status") != null && values.get("Status").equals("Ok")) {
                    Transition modelVertex = (Transition) graphModel.getVertex(((Transition) values.get("Object")).getID());
                    Transition changedVertex = (Transition) values.get("ReturnObject");
                    // update:
                    modelVertex.setName(changedVertex.getName());
                    modelVertex.setPriority(changedVertex.getPriority());
                }
                System.out.println(values);
                displayGraph(graphModel);
            } else {
                JOptionPane.showMessageDialog(this, "Wystąpił błąd podczas zaznaczania!", "Błąd", JOptionPane.ERROR_MESSAGE);
            }
        } else if (cells.length == 2) {
            // edycja krawędzi
            // pozyskanie krawędzi:
            System.out.println("Edycja krawędzi");
            Map<String, Object> values = new HashMap<>();
            Vertex sourceObject = (Vertex) ((DefaultGraphCell) cells[0]).getUserObject();
            Vertex destinationObject = (Vertex) ((DefaultGraphCell) cells[1]).getUserObject();
            Edge chosenEdge = new Edge(sourceObject.getID(), destinationObject.getID());
            System.out.println(chosenEdge);
            Edge foundEdge = graphModel.getEdge(chosenEdge.getKey());

            if (foundEdge != null) {
                values.put("Object", foundEdge);
                EditEdgePanel editEdgePanel = new EditEdgePanel(this, "Edycja krawędzi", true, values);
                if (values.get("Status") != null && values.get("Status").equals("Ok")) {
                    Edge modelEdge = (Edge) graphModel.getEdge(((Edge) values.get("Object")).getKey());
                    Edge changedVertex = (Edge) values.get("ReturnObject");
                    // update:
                    modelEdge.setCapacity(changedVertex.getCapacity());
                }
                displayGraph(graphModel);
            } else {
                JOptionPane.showMessageDialog(this, "Brak takiej krawedzi!", "Błąd", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Aby Edytowac należy zaznaczyć dokładnie jeden element lub dwa elementy w celu edycji krawędzi pomiędzy nimi!", "Błąd", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_editButtonActionPerformed

    private void matrix1ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_matrix1ButtonActionPerformed
        // TODO add your handling code here:
        resultsPanel.removeAll();
        resultsPanel.revalidate();

        // dodanie JTable do okna wynikowego:
        tabbedPane.addTab("Graf", scrollPane);
        tabbedPane.revalidate();
        tabbedPane.repaint();

        MatrixCreator matrixCreator = new MatrixCreator(graphModel);
        JPanel panel = getJPanelWithTitle("Macierz wejść");
        panel.add(matrixCreator.generateInputMatrix());
        resultsPanel.add(getJScrollPane(panel));
        tabbedPane.setSelectedIndex(0);
        System.out.println("Macierz wejść...");
    }//GEN-LAST:event_matrix1ButtonActionPerformed

    private void matrix2ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_matrix2ButtonActionPerformed
        // TODO add your handling code here:
        resultsPanel.removeAll();
        resultsPanel.revalidate();
        MatrixCreator matrixCreator = new MatrixCreator(graphModel);
        JPanel panel = getJPanelWithTitle("Macierz wyjść");
        panel.add(matrixCreator.generateOutputMatrix());
        resultsPanel.add(getJScrollPane(panel));
        tabbedPane.setSelectedIndex(0);
        System.out.println("Macierz wyjść...");
    }//GEN-LAST:event_matrix2ButtonActionPerformed

    private void matrix3ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_matrix3ButtonActionPerformed
        // TODO add your handling code here:
        resultsPanel.removeAll();
        resultsPanel.revalidate();
        MatrixCreator matrixCreator = new MatrixCreator(graphModel);
        JPanel panel = getJPanelWithTitle("Macierz incydencji");
        panel.add(matrixCreator.generateIncidenceMatrix());
        resultsPanel.add(getJScrollPane(panel));
        tabbedPane.setSelectedIndex(0);
        System.out.println("Macierz incydencji...");
    }//GEN-LAST:event_matrix3ButtonActionPerformed

    private void option1ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_option1ButtonActionPerformed
        // TODO add your handling code here:
        resultsPanel.removeAll();
        resultsPanel.revalidate();
        ReachabilityGraph reachabilityGraph = new ReachabilityGraph(graphModel);
        JPanel panel = getJPanelWithBorderLayoutAndTitle("Graf osiągalności");
        panel.add(createJGraph(reachabilityGraph.buildReachabilityGraph()));
        resultsPanel.add(getJScrollPane(panel));
        tabbedPane.setSelectedIndex(0);
        System.out.println("Graf osiągalności...");
    }//GEN-LAST:event_option1ButtonActionPerformed

    private void option2ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_option2ButtonActionPerformed
        // TODO add your handling code here:
        resultsPanel.removeAll();
        resultsPanel.revalidate();
        CoverageTree coverageTree = new CoverageTree(graphModel);
        JPanel panel = getJPanelWithBorderLayoutAndTitle("Drzewo pokrycia");
        panel.add(createJGraph(coverageTree.buildCoverageTree()));
        resultsPanel.add(getJScrollPane(panel));
        tabbedPane.setSelectedIndex(0);
        System.out.println("Drzewo pokrycia...");
    }//GEN-LAST:event_option2ButtonActionPerformed

    private void option3ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_option3ButtonActionPerformed
        // TODO add your handling code here:
        resultsPanel.removeAll();
        resultsPanel.revalidate();
        CoverageGraph coverageGraph = new CoverageGraph(graphModel);
        JPanel panel = getJPanelWithBorderLayoutAndTitle("Graf pokrycia");
        panel.add(createJGraph(coverageGraph.buildCoverageGraph()));
        resultsPanel.add(getJScrollPane(panel));
        tabbedPane.setSelectedIndex(0);
        System.out.println("Graf pokrycia...");
    }//GEN-LAST:event_option3ButtonActionPerformed

    private void startSimulationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startSimulationButtonActionPerformed
        // TODO add your handling code here:
        System.out.println("Start symulacji...");
        // 1. sprawdzenie poprawności grafu- czy jest dobrze zbudowany:
        String errors = ModelValidator.validate(graphModel);
        if (errors == null) {
            // zablokowanie możliwości edycji grafu
            // przeprowadzenie pierwszego kroku symulacji.
        } else {
            // wystąpiły błędy przy sprawdzaniu poprawności.... wypisanie ich w zakładce wyniki:
            JPanel errorPanel = new JPanel(new BorderLayout());
            JTextArea errorTextArea = new JTextArea();
            errorTextArea.setFont(new Font("monospaced", Font.PLAIN, 12));
            errorTextArea.setText(errors);
            errorPanel.add(errorTextArea, BorderLayout.CENTER);
            tabbedPane.add(errorPanel);
            tabbedPane.setSelectedIndex(0);
        }
    }//GEN-LAST:event_startSimulationButtonActionPerformed

    private void stepButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stepButtonActionPerformed
        System.out.println("Krok symulacji..");
    }//GEN-LAST:event_stepButtonActionPerformed

    private void stopSimulationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopSimulationButtonActionPerformed
        System.out.println("Stop symulacji..");
    }//GEN-LAST:event_stopSimulationButtonActionPerformed

    private void loadGraphButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadGraphButtonActionPerformed
        graphModel = GraphReader.loadGraph(graphModel);
        displayGraph(graphModel);
    }//GEN-LAST:event_loadGraphButtonActionPerformed

    private void saveGraphButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveGraphButtonActionPerformed
        GraphWriter.saveGraph(graphModel);
    }//GEN-LAST:event_saveGraphButtonActionPerformed

    public void refreshGraphTab() {

        if (tabbedPane.indexOfTab("Graf") != -1) {
            tabbedPane.remove(1);
        }
        //jGraph = new JGraph(model, view);
        scrollPane = new JScrollPane(jGraph);
        tabbedPane.addTab("Graf", scrollPane);
        tabbedPane.revalidate();
        tabbedPane.repaint();
        tabbedPane.setSelectedIndex(1);
    }

    public void adjustGraphDisplay(JGraph jGraph) {
        jGraph.setConnectable(false);                                    // zablokowanie niektórych możliwości edycji grafu
        jGraph.setDisconnectable(false);
        jGraph.setCloneable(false);
    }

    private JPanel getJPanelWithTitle(String title) {
        JPanel panel = new JPanel();
        panel.setBorder (BorderFactory.createTitledBorder (BorderFactory.createEtchedBorder (),
                title,
                TitledBorder.CENTER,
                TitledBorder.TOP));
        return panel;
    }

    private JPanel getJPanelWithBorderLayoutAndTitle(String title) {
        JPanel panel = getJPanelWithTitle(title);
        panel.setLayout(new BorderLayout());
        return panel;
    }

    private JScrollPane getJScrollPane(JPanel panel) {
        JScrollPane jScrollPane = new JScrollPane(panel);
        return jScrollPane;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new GUI().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addEdgeButton;
    private javax.swing.JPanel addPanel1;
    private javax.swing.JButton addPassageButton;
    private javax.swing.JButton addPlaceButton;
    private javax.swing.JButton editButton;
    private javax.swing.Box.Filler filler1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton matrix1Button;
    private javax.swing.JButton matrix2Button;
    private javax.swing.JButton matrix3Button;
    private javax.swing.JButton option1Button;
    private javax.swing.JButton option2Button;
    private javax.swing.JButton option3Button;
    private javax.swing.JPanel optionPanel;
    private javax.swing.JButton removeEdgeButton;
    private javax.swing.JPanel removePanel;
    private javax.swing.JButton removeVertexButton;
    private javax.swing.JPanel resultsPanel;
    private javax.swing.JPanel simulationPanel;
    private javax.swing.JButton startSimulationButton;
    private javax.swing.JButton stepButton;
    private javax.swing.JButton stopSimulationButton;
    private javax.swing.JTabbedPane tabbedPane;
    // End of variables declaration//GEN-END:variables
}
